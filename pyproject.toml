[project]
name = " "
version = "0.1.0"
description = " "
readme = "README.md"
authors = [{ name = "Jadson", email = "jadson.nascimento060@academico.ifs.edu.br" }]
requires-python = ">=3.13.5, <4.0"
dependencies = [
    "python-dotenv>=1.1.1",
]

# =========================================================================== #
#                          Lint e formatação (Ruff)                           #
# =========================================================================== #
[tool.ruff]
line-length = 79
target-version = "py313"
fix = true
show-fixes = true
indent-width = 4
exclude = ["venv", ".venv", "env", ".env", "node_modules", "__pycache__"]

[tool.ruff.lint]
preview = true
select = [
    "ASYNC",
    "A",
    "ANN",
    "B",
    "BLE",
    "C4",
    "C90",
    "COM",
    "E",
    "EM",
    "ERA",
    "EXE",
    "F",
    "FBT",
    "FIX",
    "I",
    "ICN",
    "ISC",
    'PL',
    'PT',
    "Q",
    "RET",
    "RSE",
    "S",
    "SIM",
    "SLF",
    "T10",
    "T20",
    "TC",
    "TD",
    "TRY",
    "UP",
    "W",
    "YTT",
    "RUF",
    "N",
]
ignore = ["T201", "COM812"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["ANN201", "S101"]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
line-ending = "lf"
preview = true

[tool.ruff.lint.isort]
known-first-party = ["."]

# =========================================================================== #
#                           Tipagem (Pyright)                                 #
# =========================================================================== #
[tool.pyright]
typeCheckingMode = "strict"
pythonVersion = "3.13.5"
include = [".", "src", "tests"]
exclude = [
    "**/venv",
    "**/.venv",
    "**/env",
    "**/.env",
    "**/node_modules",
    "**/__pycache__",
]
venv = ".venv"
venvPath = "."
executionEnvironments = [{ root = "src" }]

# =========================================================================== #
#                              Testes (Pytest)                                #
# =========================================================================== #
[tool.pytest.ini_options]
addopts = "-s --color=yes --tb=short"
pythonpath = ["src"]
testpaths = ["tests"]

# =========================================================================== #
#                              Tasks (TaskiPy)                                #
# =========================================================================== #
[tool.taskipy.tasks]
lint = 'ruff check'
pre_format = 'ruff check --fix'
format = 'ruff format'
run = 'uv run app.py'
pre_test = 'task lint'
test = 'pytest -s -x --cov=poc_mcp -vv'
post_test = 'coverage html'
teste = 'pytest -v -s --color=yes --tb=short'

# =========================================================================== #
#                            Build e Setuptools                               #
# =========================================================================== #
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "pyright>=1.1.405",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-xdist>=3.8.0",
    "ruff>=0.12.12",
    "taskipy>=1.14.1",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.uv.workspace]
members = ["."]

[tool.uv.sources]
chatbot = { workspace = true }

[tool.setuptools]
package-dir = { "" = "src" }
